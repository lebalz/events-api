datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String        @id @default(uuid())
    email     String        @unique
    untis     UntisTeacher? @relation(fields: [untisId], references: [id])
    untisId   Int?          @unique @map("untis_id")
    firstName String        @map("first_name")
    lastName  String        @map("last_name")
    role      Role          @default(USER)
    createdAt DateTime      @default(now()) @map("created_at")
    updatedAt DateTime      @updatedAt @map("updated_at")
    events    Event[]       @relation("events")
    jobs      Job[]

    @@map("users")
}

model Event {
    id       String @id @default(uuid())
    author   User   @relation("events", fields: [authorId], references: [id])
    authorId String @map("author_id")

    start DateTime
    end   DateTime

    location        String @default("")
    description     String @default("")
    descriptionLong String @default("") @map("description_long")

    state EventState @default(DRAFT)

    job   Job?    @relation(fields: [jobId], references: [id], onDelete: Cascade)
    jobId String? @map("import_id")

    // Filter Criterias
    classes String[] @default([])
    classYears String[] @default([]) @map("class_years")
    departments Department[] @relation("events_to_departments")
    teachersOnly Boolean @default(false) @map("teachers_only")
    klpOnly Boolean @default(false) @map("klp_only")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("events")
}

model Department {
    id          String          @id @default(uuid())
    name        String       @unique
    description String       @default("")
    classes     UntisClass[]
    events      Event[]      @relation("events_to_departments")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("departments")
}

model Semester {
    id        String @id @default(uuid())
    name      String
    start     DateTime
    end       DateTime
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("semesters")
}

model RegistrationPeriod {
    id        String @id @default(uuid())
    name      String
    start     DateTime
    end       DateTime
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("registration_periods")
}


model Job {
    id       String   @id @default(uuid())
    type     JobType
    state    JobState @default(PENDING)
    
    user     User     @relation(fields: [userId], references: [id])
    userId   String   @map("user_id")
    
    events   Event[]

    description String @default("")

    filename String?
    log      String   @default("")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("jobs")
}

model UntisTeacher {
    id       Int           @id @default(autoincrement())
    name     String        @unique
    longName String        @map("long_name")
    title    String
    active   Boolean
    lessons  UntisLesson[] @relation("teachers_to_lessons")
    classes  UntisClass[]  @relation("teachers_to_classes")
    user     User?

    @@map("untis_teachers")
}

model UntisLesson {
    id          Int            @id @default(autoincrement())
    room        String
    subject     String
    description String
    semester    String
    weekDay     Int            @map("week_day")
    startHHMM   Int            @map("start_hhmm")
    endHHMM     Int            @map("end_hhmm")
    classes     UntisClass[]   @relation("classes_to_lessons")
    teachers    UntisTeacher[] @relation("teachers_to_lessons")

    @@map("untis_lessons")
}

model UntisClass {
    id           Int            @id @default(autoincrement())
    name         String         @unique
    sf           String
    lessons      UntisLesson[]  @relation("classes_to_lessons")
    teachers     UntisTeacher[] @relation("teachers_to_classes")
    department   Department?    @relation(fields: [departmentId], references: [id])
    departmentId String?        @map("department_id")

    @@map("untis_classes")
}

enum Role {
    USER
    ADMIN
}

enum EventState {
    DRAFT
    REVIEW
    PUBLISHED
    DELETED
}

enum JobState {
    PENDING
    ERROR
    DONE
    REVERTED
}

enum JobType {
    IMPORT
    CLONE
    SYNC_UNTIS
}
