generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs/prisma"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email      String        @unique
  untisId    Int?          @unique @map("untis_id")
  firstName  String        @map("first_name")
  lastName   String        @map("last_name")
  role       Role          @default(USER)
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  icsLocator String?       @map("ics_locator")
  id         String        @id @db.Uuid
  events     Event[]       @relation("events")
  jobs       Job[]
  untis      UntisTeacher? @relation(fields: [untisId], references: [id])

  @@map("users")
}

model Event {
  start           DateTime
  end             DateTime
  location        String       @default("")
  description     String       @default("")
  descriptionLong String       @default("") @map("description_long")
  state           EventState   @default(DRAFT)
  classes         String[]     @default([])
  teachersOnly    Boolean      @default(false) @map("teachers_only")
  klpOnly         Boolean      @default(false) @map("klp_only")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  classGroups     String[]     @default([]) @map("class_groups")
  deletedAt       DateTime?    @map("deleted_at")
  subjects        String[]     @default([])
  id              String       @id @db.Uuid
  authorId        String       @map("author_id") @db.Uuid
  jobId           String?      @map("import_id") @db.Uuid
  author          User         @relation("events", fields: [authorId], references: [id])
  job             Job?         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  departments     Department[] @relation("events_to_departments")

  @@map("events")
}

model Department {
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  color       String       @default("#306cce")
  id          String       @id @db.Uuid
  letter      String       @default("")
  classes     UntisClass[]
  events      Event[]      @relation("events_to_departments")

  @@map("departments")
}

model Semester {
  name      String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  id        String   @id @db.Uuid

  @@map("semesters")
}

model RegistrationPeriod {
  name      String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  id        String   @id @db.Uuid

  @@map("registration_periods")
}

model Job {
  type        JobType
  state       JobState @default(PENDING)
  description String   @default("")
  filename    String?
  log         String   @default("")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  id          String   @id @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  events      Event[]
  user        User     @relation(fields: [userId], references: [id])

  @@map("jobs")
}

model UntisTeacher {
  id       Int           @id @default(autoincrement())
  name     String        @unique
  longName String        @map("long_name")
  title    String
  active   Boolean
  user     User?
  classes  UntisClass[]  @relation("teachers_to_classes")
  lessons  UntisLesson[] @relation("teachers_to_lessons")

  @@map("untis_teachers")
}

model UntisLesson {
  id          Int            @id @default(autoincrement())
  room        String
  subject     String
  description String
  weekDay     Int            @map("week_day")
  startHHMM   Int            @map("start_hhmm")
  endHHMM     Int            @map("end_hhmm")
  year        Int
  semester    Int
  classes     UntisClass[]   @relation("classes_to_lessons")
  teachers    UntisTeacher[] @relation("teachers_to_lessons")

  @@map("untis_lessons")
}

model UntisClass {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  sf           String
  year         Int
  legacyName   String?        @unique @map("legacy_name")
  departmentId String?        @map("department_id") @db.Uuid
  department   Department?    @relation(fields: [departmentId], references: [id])
  lessons      UntisLesson[]  @relation("classes_to_lessons")
  teachers     UntisTeacher[] @relation("teachers_to_classes")

  @@map("untis_classes")
}

view UserUntisView {
  uId           String @map("u_id") @db.Uuid
  uEmail        String @map("u_email")
  cId           Int    @map("c_id")
  cName         String @map("c_name")
  cNameLegacy   String @map("c_name_legacy")
  lId           Int    @map("l_id")
  lSubject      String @map("l_subject")
  lStartHHMM    Int    @map("l_start_hhmm")
  lEndHHMM      Int    @map("l_end_hhmm")
  lWeekDay      Int    @map("l_week_day")
  lSemesterYear Int    @map("l_semester_year")
  lSemesterNr   Int    @map("l_semester_nr")
  dId           String @map("d_id") @db.Uuid
  dName         String @map("d_name")

  @@unique([uId, cId, lId, dId])
  @@map("user_untis_view")
}

view SemesterView {
  id            String @map("id") @unique @db.Uuid
  name          String @map("name")
  semesterYear Decimal @map("semester_year")  @db.Decimal
  semesterNr   Int @map("semester_nr")
  start         DateTime @map("start")
  end           DateTime @map("end")
  hasLessons   Boolean @map("has_lessons")
  isCurrent    Boolean @map("is_current")
  @@map("semester_view")
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
view EventView {
  s_id               String @map("s_id")  @db.Uuid
  s_year             Decimal @map("s_year") @db.Decimal
  s_nr               Int @map("s_nr")
  s_active           Boolean @map("s_active")
  join_semester_year Decimal @map("join_semester_year") @db.Decimal
  join_semester_nr   Int @map("join_semester_nr")
  e_id               String @map("e_id")  @db.Uuid
  classes            String[] @map("classes")
  description        String @map("description")
  class_groups       String[] @map("class_groups")
  teachers_only      Boolean @map("teachers_only")
  klp_only           Boolean @map("klp_only")
  subjects           String[] @map("subjects")
  department_ids     String[] @map("department_ids") @db.Uuid
  year_s             Decimal @map("year_s") @db.Decimal
  year_e             Decimal @map("year_e") @db.Decimal
  start_week_day     Decimal @map("start_week_day") @db.Decimal
  end_week_day       Decimal @map("end_week_day") @db.Decimal
  start_offset_m     Decimal @map("start_offset_m") @db.Decimal
  end_offset_m       Decimal @map("end_offset_m") @db.Decimal
  duration_m         Decimal @map("duration_m") @db.Decimal

  @@unique([s_id, e_id])
  @@map("event_view")
}

view UserTeachingView {
  lSemesterYear     Int @map("l_semester_year")
  lSemesterNr       Int @map("l_semester_nr")
  classIds          Int[] @map("class_ids")
  classNames        String[] @map("class_names")
  legacyClassNames  String[] @map("legacy_class_names")
  subjects          String[] @map("subjects")
  departmentIds     String[] @db.Uuid @map("department_ids")
  departmentNames   String[] @map("department_names")

  @@unique([lSemesterYear, lSemesterNr])
  @@map("user_teaching_view")
}

enum Role {
  USER
  ADMIN
}

enum EventState {
  DRAFT
  REVIEW
  PUBLISHED
  REFUSED
}

enum JobState {
  PENDING
  ERROR
  DONE
  REVERTED
}

enum JobType {
  IMPORT
  CLONE
  SYNC_UNTIS
}
