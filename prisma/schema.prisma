datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String        @id @default(uuid())
    email     String        @unique
    untis     UntisTeacher? @relation(fields: [untisId], references: [id])
    untisId   Int?          @unique @map("untis_id")
    firstName String        @map("first_name")
    lastName  String        @map("last_name")
    role      Role          @default(USER)
    createdAt DateTime      @default(now()) @map("created_at")
    updatedAt DateTime      @updatedAt @map("updated_at")
    events    Event[]       @relation("events")
    jobs Job[]

    @@map("users")
}

model Event {
    id              String         @id @default(uuid())
    author          User           @relation("events", fields: [authorId], references: [id])
    authorId        String         @map("author_id")
    start           DateTime
    end             DateTime
    allDay          Boolean        @map("all_day")
    location        String
    description     String
    descriptionLong String         @map("description_long")
    departments     Departments[] @default([])
    classes         String[]       @default([])
    state           EventState     @default(DRAFT)
    job             Job?           @relation(fields: [jobId], references: [id], onDelete: Cascade)
    jobId           String?        @map("import_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("events")
}

model Job {
    id     String   @id @default(uuid())
    type   JobType
    state  JobState @default(PENDING)
    user   User     @relation(fields: [userId], references: [id])
    userId String   @map("user_id")
    events Event[]
    filename String?
    log    String   @default("")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("jobs")
}

model UntisTeacher {
    id       Int           @id @default(autoincrement())
    name     String        @unique
    longName String        @map("long_name")
    title    String
    active   Boolean
    lessons  UntisLesson[] @relation("_teachers_to_lessons")
    classes  UntisClass[]  @relation("_teachers_to_classes")
    user     User?

    @@map("untis_teachers")
}

model UntisLesson {
    id          Int            @id @default(autoincrement())
    room        String
    subject     String
    description String
    semester    String
    weekDay     Int            @map("week_day")
    startDHHMM  Int            @map("start_dhhmm")
    endDHHMM    Int            @map("end_dhhmm")
    classes     UntisClass[]   @relation("_classes_to_lessons")
    teachers    UntisTeacher[] @relation("_teachers_to_lessons")

    @@map("untis_lessons")
}

model UntisClass {
    id       Int            @id @default(autoincrement())
    name     String
    sf       String
    lessons  UntisLesson[]  @relation("_classes_to_lessons")
    teachers UntisTeacher[] @relation("_teachers_to_classes")
    department Departments?
    @@map("untis_classes")
}

enum Role {
    STUDENT
    USER
    ADMIN
}

enum Departments {
    GYM
    GBSL
    GBJB
    FMS
    FMPaed
    ECG  // FMS
    WMS
    ESC  // WMS
    MSOP // FMPÃ¤d
}

enum EventState {
    DRAFT
    REVIEW
    PUBLISHED
    DELETED
}

enum JobState {
    PENDING
    ERROR
    DONE
    REVERTED
}

enum JobType {
    IMPORT
    CLONE
    SYNC_UNTIS
}

// model UntisSubject {
//     id        Int    @id @default(autoincrement())
//     name      String
//     longName  String @map("long_name")
//     backColor String @map("back_color")
//     untisLessons UntisLesson[]
//     @@map("untis_subjects")
// }

// model UntisRoom {
//     id        Int    @id @default(autoincrement())
//     name      String
//     longName  String @map("long_name")
//     untisLessons UntisLesson[]
//     @@map("untis_rooms")
// }
